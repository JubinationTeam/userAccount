'use strict'

//node dependencies
var jubiForLoop = require('jubi-for-loop');

//user-defined dependencies
const EventEmitter = require('events');

//init variables
var callBackEventName;
var globalEmitter;
var postUrlDef;
var getUrlDef;
var validPostEntities;
var validGetEntities;
var noOfRequests=0;
var nextCall;

//model class
class Model extends EventEmitter {   }

//function to accept parameters required by the setup function
function init(initVar){
    if(typeof initVar === "object"
       &&typeof initVar.globalEmitter === "object"
       &&initVar.globalEmitter instanceof EventEmitter
       &&typeof initVar.postUrlDef === "string"
       &&typeof initVar.getUrlDef === "string"
       &&typeof initVar.callbackName === "string"
       &&typeof initVar.nextCall === "string"
       &&typeof initVar.validRequestEntities.post === "object"
       &&typeof initVar.validRequestEntities.get === "object"
       &&initVar.validRequestEntities.post instanceof Array
       &&initVar.validRequestEntities.get instanceof Array){
            globalEmitter=initVar.globalEmitter;
            postUrlDef=initVar.postUrlDef;
            getUrlDef=initVar.getUrlDef;
            validPostEntities=initVar.validRequestEntities.post;
            validGetEntities=initVar.validRequestEntities.get;
            callBackEventName=initVar.callbackName;
            nextCall=initVar.nextCall
    }
    else{
        console.log("Initialization of Controller Failed due to improper parameters...")
    }
}

//routing function
function process(app){
    if(typeof app === "function"){
        app.post(postUrlDef, instantiate);
        app.get(getUrlDef, instantiate);
        
    }else{
       console.log("Express parameters not proper...") 
    }
    return app;
}

//function to instantiate the model
function instantiate(req,res){
    if(typeof req === "object"&&typeof res === "object"){
        var model=new Model()
        model.setMaxListeners(6);
        model.req=req
        model.res=res
        model.params=req.params
        model.callBackRouter=callBackEventName;
        if(req.method=="POST"){
            model.requestType=validPostEntities;
        }
        else if (req.method=="GET"){
            model.requestType=validGetEntities;
        }
        model.requestUrl="";
        var keys=Object.keys(model.params);
        jubiForLoop(model,keys,(data,key)=>{data.requestUrl+=data.params[key]+"/"},validate)
    }
    else{
        console.log("Request/Response is not object");
    }
   
}

//function to validate
function validate(model){
    if(!model.req.body)
    {
        model.info="Body not present"
        respond(model);
    }
    else if(model.requestType.includes(model.requestUrl)){
        model.once(callBackEventName, respond);
        var keys=Object.keys(model.req.params);
        jubiForLoop(model,keys,(data,key)=>{globalEmitter.emit(data.params[key],data)},(data)=>{data.emit(nextCall,data)})
    }
    else{
        model.info="Invalid Request Url"
        respond(model);
    }
}

//function to respond back
function respond(model){
    model.removeAllListeners();
    if(noOfRequests==Number.MAX_SAFE_INTEGER){
        noOfRequests=0;
    }else{
        noOfRequests+=1;
    }
    console.log("served "+noOfRequests+" requests")
    model.res.setHeader('Content-Type', 'application/json'); 
    model.res.send(JSON.stringify({'data':model.info}, null, 3));
    model.res.end();
}

//exports
module.exports.process=process;
module.exports.init=init;